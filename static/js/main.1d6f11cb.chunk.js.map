{"version":3,"sources":["SelectionContainer.js","App.js","serviceWorker.js","index.js"],"names":["SelectionContainer","props","react_default","a","createElement","className","MAPBOX_ACCESS_TOKEN","initialView","longitude","latitude","zoom","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onWebGLInitialized","gl","setState","_onMapLoad","map","_map","deck","_deck","addLayer","MapboxLayer","id","state","_onViewStateChange","bind","assertThisInitialized","viewState","_ref","_this2","TileLayer","type","getTileData","_ref2","x","y","z","mapSource","concat","fetch","then","response","arrayBuffer","buffer","features","vectorTileLayer","VectorTile","Protobuf","layers","i","length","feature","toGeoJSON","push","onTileError","e","console","error","maxZoom","onHover","info","hoveredObject","object","pointerX","pointerY","renderSubLayers","ScatterplotLayer","opacity","pickable","getLineWidth","radiusScale","Math","pow","max","radiusMinPixels","radiusMaxPixels","getPosition","d","geometry","coordinates","getFillColor","getRadius","sqrt","properties","NR_ASSESSED_VALUE","_ref3","style","position","zIndex","pointerEvents","left","top","toLocaleString","ADDRESS","_this3","deckgl","ref","_renderLayers","initialViewState","controller","onWebGLInitialized","onViewStateChange","esm","getMap","mapStyle","mapboxApiAccessToken","onLoad","_renderTooltip","src_SelectionContainer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d6f11cb.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction SelectionContainer(props) {\n  return (\n    <div>\n      <div className='absolute top left w300 h120 py6 px6 ml36 mt36 bg-blue prose'>\n        <h4>City of Calgary Non-Residential Property Assessment</h4>\n        Deck.gl Scatterplot Layer\n      </div>\n    </div>\n  )\n}\n\n\nexport default SelectionContainer\n","import React from 'react';\nimport DeckGL from '@deck.gl/react';\nimport {MapboxLayer} from \"@deck.gl/mapbox\";\nimport {StaticMap} from 'react-map-gl';\nimport {TileLayer} from '@deck.gl/geo-layers';\nimport {VectorTile} from '@mapbox/vector-tile';\nimport Protobuf from 'pbf';\nimport {ScatterplotLayer} from '@deck.gl/layers';\n\nimport SelectionContainer from \"./SelectionContainer\"\n\nconst MAPBOX_ACCESS_TOKEN = 'pk.eyJ1Ijoic2FhZGlxbSIsImEiOiJjamJpMXcxa3AyMG9zMzNyNmdxNDlneGRvIn0.wjlI8r1S_-xxtq2d-W5qPA';\n\nconst initialView = {\n  longitude: -114.062019,\n  latitude: 51.044270,\n  zoom:10.5,\n};\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      zoom:initialView.zoom,\n    };\n    this._onViewStateChange = this._onViewStateChange.bind(this);\n  }\n\n  _onWebGLInitialized = (gl) => {\n    this.setState({gl});\n  }\n\n  _onMapLoad = () => {\n    const map = this._map;\n    const deck = this._deck;\n\n    let name = \"assessment-NR\"\n    map.addLayer(new MapboxLayer({id: name, deck}),'waterway-label');\n  }\n\n  _onViewStateChange({viewState}) {\n    this.setState({zoom:viewState.zoom});\n  }\n\n  _renderLayers() {\n\n    const scatter_layer =  new TileLayer({\n      id: \"assessment-NR\",\n      type: TileLayer,\n      getTileData: ({x, y, z}) => {\n        const mapSource = `https://a.tiles.mapbox.com/v4/saadiqm.azk20mv4/${z}/${x}/${y}.vector.pbf?access_token=${MAPBOX_ACCESS_TOKEN}`;\n        return fetch(mapSource)\n          .then(response => response.arrayBuffer())\n          .then(buffer => {\n            const tile = new VectorTile(new Protobuf(buffer));\n\n            const features = [];\n            let vectorTileLayer = tile.layers[\"NR\"]\n\n            for (let i = 0; i < vectorTileLayer.length; i++) {\n              const vectorTileFeature = vectorTileLayer.feature(i);\n              const feature = vectorTileFeature.toGeoJSON(x, y, z);\n              features.push(feature);\n            }\n            return features;\n          });\n      },\n      onTileError:(e) => console.error(e),\n      maxZoom:14,\n      onHover: info => this.setState({\n       hoveredObject: info.object,\n       pointerX: info.x,\n       pointerY: info.y\n      }),\n      renderSubLayers: props => {\n        return new ScatterplotLayer(props,{\n            opacity:0.5,\n            pickable: true,\n            getLineWidth:0,\n            radiusScale: Math.pow(2, Math.max(14 - this.state.zoom, 0)),\n            radiusMinPixels: 1,\n            radiusMaxPixels:90,\n            getPosition: d => d.geometry.coordinates,\n            getFillColor: d => [66, 135, 245],\n            getRadius: d => Math.sqrt(d.properties.NR_ASSESSED_VALUE)/500,\n          });\n        }\n      })\n\n    return [scatter_layer]\n  }\n\n  _renderTooltip() {\n    const {hoveredObject, pointerX, pointerY} = this.state || {};\n    return hoveredObject && (\n      <div style={{position: 'absolute', zIndex: 1, pointerEvents: 'none', left: pointerX, top: pointerY}} className=\"bg-lighten75 py6 px12\">\n        <p className=\"txt-bold\">{\"$\"+hoveredObject.properties['NR_ASSESSED_VALUE'].toLocaleString()}</p>\n        <p className=\"txt-s\">{hoveredObject.properties.ADDRESS}</p>\n      </div>\n    );\n  }\n\n  render() {\n\n    const {gl} = this.state;\n\n    return (\n      <div>\n      <DeckGL\n        ref={ref => {\n          this._deck = ref && ref.deck;\n        }}\n        layers={this._renderLayers()}\n        initialViewState={initialView}\n        controller={true}\n        onWebGLInitialized={this._onWebGLInitialized}\n        onViewStateChange={this._onViewStateChange}\n\n      >\n      {gl && (\n        <StaticMap\n          ref={ref => {\n            this._map = ref && ref.getMap();\n          }}\n          gl={gl}\n          mapStyle=\"mapbox://styles/saadiqm/cjxbd493m05cc1cl29jntlb1w?optimize=true\"\n          mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN}\n          onLoad={this._onMapLoad}\n        />\n      )}\n      {this._renderTooltip()}\n      </DeckGL>\n        <SelectionContainer/>\n      </div>\n\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}